---
description: Project specification
globs:
alwaysApply: true
---

# Updated Plan & Tech Stack 

## User-Facing Patient Screen

* **Location-based search (clinics, pharmacies, pop-ups, telehealth)**
  * **Leaflet** (map UI + geolocation display)
  * **Mapbox** (travel time + routing directions to clinics)
  * **Supabase (Postgres + PostGIS)** for geospatial queries (KNN / ST_DWithin)
  * **Next.js (API routes on Vercel)** to fetch from your **own DB** (canonical source)
  * **Vercel Cron or Supabase pg_cron jobs + Scraper pipeline** (runs hourly → updates Supabase)
  * **Stagehand/Google Search fallback** if DB is stale or missing coverage
  * **Travel time integration**: combine **travel time** (Mapbox) with **current wait time** for routing decisions
  * **Wait time data**: fetch via **Solv API**, **Epic API**, or other integrations
  * **Closest ER fallback**: provide option to route directly to the nearest ER
  * **Search radius expansion**: if fewer than **5 clinics** are found in the initial radius, expand search until at least 5 clinics are returned

* **Offline caching (lists, contacts, directions)**
  * **Next.js** + PWA service worker for UI/data caching
  * **Supabase** with row versioning (`updated_at`) → delta syncs
  * **Vercel ISR** for asset refreshes in background

* **Request submission (service demand signals)**
  * **Next.js** form → **Supabase** (`patient_requests`) w/ **RLS**
  * **Supabase Realtime** → provider dashboards
  * **Gemini 2.5 Pro agents** optional triage/classifier (severity, urgency)

* **Telehealth fallback (low-acuity cases)**
  * If vitals/symptoms indicate **low acuity** and site supports video visits, show **“Start Telehealth Now”** when in-person queues spike
  * Integrate with **Solv/InQuicker virtual inventories** where available
  * **Prefer rural providers** when possible for telehealth visits
  * Allow patients to **book urgent care appointments** directly if needed

---

## Provider-Facing Screen

* **Post new pop-ups, mobile services, schedules**
  * **Next.js** CRUD UI (role-gated)
  * **Supabase** (`events`, `provider_availability`)
  * **Supabase Realtime** → broadcast new availability

* **Heatmaps of unmet requests (aggregated & anonymized)**
  * **Supabase** materialized views + PostGIS binning
  * **Leaflet** heatlayer for visualization
  * **Exa + Perplexity** enrichment → “signal overlays” (events, advisories)

* **Manage resources (hours, staffing, capacity)**
  * **Next.js** provider/admin UI
  * **Supabase** (`facilities`, `capacity_snapshots`) + RLS
  * **Realtime** → live updates to patients

---

## Smart Load-Balancing

* **Route patients to rural/local providers first**
  * **Gemini 2.5 Pro agents** run ranking policy (distance, fragility index, travel time, capacity)
  * **Supabase** stores weights (fragility, capacity)
  * **Next.js API routes** → expose ranked recommendations
  * Preference for **rural providers** when applicable (including telehealth)

* **Throttle urban clinics on spikes**
  * **Vercel Edge Middleware** → per-region rate-limiting of recs
  * **Gemini agents** adjust weights in response to live demand (Supabase counts)
  * **Supabase** surge states + feature flags

* **Balance telehealth vs in-person**
  * **Next.js** checks Network Information API (bandwidth, RTT)
  * **Gemini agents** choose modality (telehealth if long travel/low bandwidth)
  * **Supabase** tracks outcomes → feedback into weights

---

## Cross-Cutting

* **Auth & Roles**: Supabase Auth (patients/providers/admin); row-level security
* **Data Pipeline**: **Vercel Cron** (API route trigger) or **Supabase pg_cron** (DB-native) → Scraper jobs → Supabase ingestion → dedup/normalize
* **Knowledge/Search**: Stagehand + Google Search bootstrap; Exa/Perplexity enrichment (kept separate from DB)
* **APIs/Serverless**: Next.js Route Handlers on Vercel; Edge Middleware for geo/rate control
* **Realtime**: Supabase Realtime for dashboards & live map updates
* **Offline/PWA**: Service worker + Supabase delta syncs
* **Observability**: Vercel analytics, Supabase logs, decision traces
* **UI Polish**: ShadCN UI + Tailwind + Framer Motion for clean hackathon-ready look. Feel free to add more Shadcn components, even ones we don’t have in our current project
* **tRPC**: use tRPC for all API-related things. Wrap API calls, cron-triggered scrapers, and DB mutations in tRPC endpoints

---

## Flow

* **Emergency Safety**  
  * At all times, display a visible warning:  
    > *If this is a medical emergency, call 911 immediately.*  
  * Provide an **ER button**: if clicked, immediately show directions to the **closest ER** (via **Mapbox directions**).

* **Initial Patient Input**  
  * Begin by asking the user what they need or what their symptoms are.  
  * Prompt them through a series of questions to help determine **acuity** and severity.

* **Decision Pathway**  
  * Based on responses, determine if the patient should go to **ER, urgent care, or a pop-up clinic**.  
  * Confirm with the user before final recommendation.  
  * If applicable, provide option to start a **telehealth visit**.

* **Routing & Load Balancing**  
  * For in-person visits:  
    * Find the **shortest-time clinic** = travel time (**Mapbox**) + clinic wait time.  
    * Prefer **rural hospitals** when possible to aid load balancing.  
    * Expand search radius until at least **5 clinics** are found.  
  * For telehealth visits: prefer **rural providers** first when available.

* **Clinic Data Sourcing**  
  * Build list of clinics from **scraped + normalized database**.  
  * On each request, re-run scrape unless time + distance are close to a previous call.  
  * Scraped data saved to database for reuse.  
  * For rural areas, run daily scrape and **cache locally** for offline access.

* **User Presentation**  
  * Show all available options, ordered by **shortest-time first**, with calculated times displayed.  
  * If in-person chosen: provide directions via **Mapbox** to hospital.  
  * If telehealth or urgent care supports it: allow **appointment scheduling** to reduce wait time.

* **Other Features**  
  * In **settings**, patients can store insurance and plan details → system prefers **in-network providers**.  
  * In **settings**, patints can modify the search radius for clincs in their area
  * Patient can ask questions about the process at any time → conversational agent support.

---
